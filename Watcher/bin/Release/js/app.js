// Generated by CoffeeScript 1.6.3
(function() {
  var ctrls, helpers, html, iYans, iYansLogin, serverUrl, urls,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iYans = angular.module('iyans', ['ngRoute', 'route-segment', 'view-segment']);

  iYans.service('Login', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).Login;
  });

  iYans.service('GetToken', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).GetToken;
  });

  iYans.service('RefreshToken', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).RefreshToken;
  });

  iYans.service('LoginWithToken', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).LoginWithToken;
  });

  iYans.service('Logout', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).Logout;
  });

  iYans.service('UsersById', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).UsersById;
  });

  iYans.service('UserById', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).UserById;
  });

  iYans.service('AllUsers', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AllUsers;
  });

  iYans.service('AddUser', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AddUser;
  });

  iYans.service('AddYan', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AddYan;
  });

  iYans.service('GetYan', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).GetYan;
  });

  iYans.service('DeleteYan', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).DeleteYan;
  });

  iYans.service('AllUserHomeYans', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AllUserHomeYans;
  });

  iYans.service('AllUserYans', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AllUserYans;
  });

  iYans.service('AllUserReyans', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AllUserReyans;
  });

  iYans.service('AllUserYansAndReyans', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AllUserYansAndReyans;
  });

  iYans.service('FollowUser', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).FollowUser;
  });

  iYans.service('UnfollowUser', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).UnfollowUser;
  });

  iYans.service('AllUserFollowers', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AllUserFollowers;
  });

  iYans.service('AddReyan', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AddReyan;
  });

  iYans.service('RemoveReyan', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).RemoveReyan;
  });

  iYans.service('AddComment', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AddComment;
  });

  iYans.service('GetComments', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).GetComments;
  });

  iYans.service('DeleteComment', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).DeleteComment;
  });

  iYans.service('NumberUsers', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).NumberUsers;
  });

  iYans.service('NumberUserFollowers', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).NumberUserFollowers;
  });

  iYans.service('AttachFile', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AttachFile;
  });

  iYans.service('AddFavorite', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AddFavorite;
  });

  iYans.service('RemoveFavorite', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).RemoveFavorite;
  });

  iYans.service('NumberYanFavourites', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).NumberYanFavourites;
  });

  iYans.service('GetYanFavorites', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).GetYanFavorites;
  });

  iYans.service('GetUserFavorites', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).GetUserFavorites;
  });

  iYans.service('AddLike', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AddLike;
  });

  iYans.service('RemoveLike', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).RemoveLike;
  });

  iYans.service('NumberYanLikes', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).NumberYanLikes;
  });

  iYans.service('ReadNotification', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).ReadNotification;
  });

  iYans.service('AllUserNotifications', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).AllUserNotifications;
  });

  iYans.service('PendingUserNotifications', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).PendingUserNotifications;
  });

  iYans.service('DeleteNotification', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).DeleteNotification;
  });

  iYans.service('NumberPendingUserNotifications', function($rootScope, $q, $http) {
    return this.get = app.services($rootScope, $q, $http).NumberPendingUserNotifications;
  });

  iYans.directive('makeYan', function() {
    return window.app.directives.MakeYan;
  });

  iYans.directive('userNameFormat', function() {
    return window.app.directives.UserNameFormat;
  });

  iYans.directive('yansSection', function() {
    return window.app.directives.YansSection;
  });

  iYans.directive('addVideo', function() {
    return window.app.directives.AddVideo;
  });

  iYans.directive('addImage', function() {
    return window.app.directives.AddImage;
  });

  iYans.directive('showNotification', function() {
    return window.app.directives.ShowNotification;
  });

  iYans.run([
    '$rootScope', '$compile', '$timeout', function($rootScope, $compile, $timeout) {
      var _this = this;
      $rootScope.tryApply = function(act) {
        if ($rootScope.$$phase) {
          return act();
        } else {
          return $rootScope.$apply(act);
        }
      };
      $rootScope.timeout = $timeout;
      return $rootScope.compile = $compile;
    }
  ]);

  html = window.html;

  ctrls = window.app.controllers;

  iYans.config(function($routeSegmentProvider, $routeProvider) {
    $routeSegmentProvider.when('/root', 'root').when('/login', 'login').when('/signup', 'signup').when('/main', 'main').when('/main/home', 'main.home').when('/main/home/singleYan', 'main.home.singleYan').when('/main/home/singleYan/:yanId', 'main.home.singleYan.yan').when('/main/home/notifications', 'main.home.notifications').when('/main/home/homefavorites', 'main.home.homefavorites').when('/main/home/myhome', 'main.home.myhome').when('/main/home/me', 'main.home.me').when('/main/home/mydashboard', 'main.home.mydashboard').when('/main/attend', 'main.attend').when('/main/attend/attendhome', 'main.attend.attendhome').when('/main/attend/attenddashboard', 'main.attend.attenddashboard').segment('root', {
      template: html.root
    }).segment('login', {
      template: html.login
    }).segment('signup', {
      template: html.signup
    }).segment('main', {
      template: html.main
    }).within().segment('home', {
      template: html.home
    }).within().segment('singleYan', {
      template: ''
    }).within().segment('yan', {
      template: html.singleYan
    }).up().segment('notifications', {
      template: html.notifications
    }).segment('homefavorites', {
      template: html.homefavorites
    }).segment('mydashboard', {
      template: html.homeDashboard
    }).segment('myhome', {
      template: html.yans
    }).segment('me', {
      template: html.yans
    }).up().segment('attend', {
      template: html.attend
    }).within().segment('attendhome', {
      template: html.yans
    }).segment('attenddashboard', {
      template: html.attendDashboard
    });
    return $routeProvider.otherwise({
      redirectTo: '/root'
    });
  });

  iYansLogin = angular.module('iyansLogin', ['ngRoute', 'route-segment', 'view-segment']);

  iYansLogin.run([
    '$rootScope', '$compile', '$timeout', function($rootScope, $compile, $timeout) {
      var _this = this;
      $rootScope.tryApply = function(act) {
        if ($rootScope.$$phase) {
          return act();
        } else {
          return $rootScope.$apply(act);
        }
      };
      $rootScope.timeout = $timeout;
      return $rootScope.compile = $compile;
    }
  ]);

  iYansLogin.config(function($routeSegmentProvider, $routeProvider) {
    $routeSegmentProvider.when('/login', 'l').when('/signup', 's').segment('l', {
      template: loginHtml
    }).segment('s', {
      template: signupHtml
    });
    return $routeProvider.otherwise({
      redirectTo: 'login'
    });
  });

  helpers = window.app.helpers;

  window.namespace('app.controllers', function() {
    var MainCtrl;
    MainCtrl = (function() {
      function MainCtrl(scope, location) {
        this.scope = scope;
        this.location = location;
        this.pushTodos = __bind(this.pushTodos, this);
        this.loadTodos = __bind(this.loadTodos, this);
        this.scopeData = __bind(this.scopeData, this);
        this.watchers = __bind(this.watchers, this);
        this.scopeData();
        this.watchers();
        this.loadTodos();
        window.scope = this.scope;
      }

      MainCtrl.prototype.watchers = function() {
        var _this = this;
        return this.scope.$watch('displayed', function(value) {
          return _this.location.url(value);
        });
      };

      MainCtrl.prototype.scopeData = function() {
        var _this = this;
        this.scope.self = this.scope;
        this.scope.helpers = helpers;
        this.scope.sortType = 'date';
        this.scope.reverse = false;
        this.scope.displayed = this.location.url().substr(1) || 'pending';
        this.scope.showInfoName = null;
        this.scope.tooltipToDestroy = null;
        this.scope.validateForm = function(form) {
          if (form.name.$error.required) {
            _this.scope.setShowInfoName('name-error');
          } else if (form.deadline.$error.required) {
            _this.scope.setShowInfoName('deadline-error');
          }
          if (form.$valid) {
            return true;
          } else {
            return false;
          }
        };
        this.scope.addToDo = function() {
          return _this.scope.tryApply(function() {
            var date;
            if (_this.scope.validateForm(_this.scope.addTodoForm)) {
              date = (new Date).valueOf();
              _this.scope.todos[date] = {
                name: _this.scope.name,
                text: _this.scope.text,
                setDate: date,
                deadlineDate: _this.scope.deadline.valueOf(),
                status: 'pending'
              };
              _this.pushTodos();
              _this.scope.text = '';
              _this.scope.name = '';
              _this.scope.deadline = null;
              _this.scope.addTodoForm.$setPristine();
              return _this.scope.setShowInfoName('added');
            }
          });
        };
        this.scope.setReverse = function(value) {
          return _this.scope.tryApply(function() {
            return _this.scope.reverse = value;
          });
        };
        this.scope.setSortType = function(value) {
          return _this.scope.tryApply(function() {
            return _this.scope.sortType = value;
          });
        };
        this.scope.setShowInfoName = function(value) {
          return _this.scope.tryApply(function() {
            return _this.scope.showInfoName = value;
          });
        };
        this.scope.setTooltipToDestroy = function(value) {
          return _this.scope.tryApply(function() {
            return _this.scope.tooltipToDestroy = value;
          });
        };
        this.scope.goToPending = function() {
          return _this.scope.tryApply(function() {
            return _this.scope.displayed = 'pending';
          });
        };
        this.scope.goToDone = function() {
          return _this.scope.tryApply(function() {
            return _this.scope.displayed = 'done';
          });
        };
        this.scope.deadlineText = function() {
          return helpers.dateFormat(_this.scope.deadline);
        };
        return this.scope.flushToStorage = this.pushTodos;
      };

      MainCtrl.prototype.loadTodos = function() {
        var k, storedTodos, v, _ref, _results,
          _this = this;
        storedTodos = JSON.parse(window.localStorage.getItem('todos'));
        this.scope.todos = storedTodos != null ? helpers.arrayToObject(_.sortBy(storedTodos, function(item) {
          return item.date;
        }), 'setDate') : [];
        _ref = this.scope.todos;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(delete v.$$hashKey);
        }
        return _results;
      };

      MainCtrl.prototype.pushTodos = function() {
        return window.localStorage.setItem('todos', JSON.stringify(this.scope.todos));
      };

      return MainCtrl;

    })();
    return this.MainCtrl = function($scope, $location) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(MainCtrl, arguments, function(){});
    };
  });

  window.namespace = function(path, callback) {
    var place, token, tokens, _i, _len;
    tokens = path.split('.');
    place = window;
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
      token = tokens[_i];
      if (place[token] == null) {
        place[token] = {
          parent: place
        };
      }
      place = place[token];
    }
    return callback.call(place);
  };

  window.namespace('app', function() {
    var Services;
    window.favorites = {
      byUser: {},
      byYan: {}
    };
    window.likes = {
      byUser: {},
      byYan: {}
    };
    window.notifications = {};
    Services = (function() {
      var _this = this;

      function Services(rootScope, q, http, resource) {
        this.rootScope = rootScope;
        this.q = q;
        this.http = http;
        this.resource = resource;
        this.httpRequest = __bind(this.httpRequest, this);
        this.xhrRequest = __bind(this.xhrRequest, this);
        this.fakeRequest = __bind(this.fakeRequest, this);
        this.NumberPendingUserNotifications = __bind(this.NumberPendingUserNotifications, this);
        this.DeleteNotification = __bind(this.DeleteNotification, this);
        this.PendingUserNotifications = __bind(this.PendingUserNotifications, this);
        this.AllUserNotifications = __bind(this.AllUserNotifications, this);
        this.ReadNotification = __bind(this.ReadNotification, this);
        this.NumberYanLikes = __bind(this.NumberYanLikes, this);
        this.RemoveLike = __bind(this.RemoveLike, this);
        this.AddLike = __bind(this.AddLike, this);
        this.GetUserFavorites = __bind(this.GetUserFavorites, this);
        this.GetYanFavorites = __bind(this.GetYanFavorites, this);
        this.NumberYanFavourites = __bind(this.NumberYanFavourites, this);
        this.RemoveFavorite = __bind(this.RemoveFavorite, this);
        this.AddFavorite = __bind(this.AddFavorite, this);
        this.AttachFile = __bind(this.AttachFile, this);
        this.NumberUserFollowers = __bind(this.NumberUserFollowers, this);
        this.NumberUsers = __bind(this.NumberUsers, this);
        this.DeleteComment = __bind(this.DeleteComment, this);
        this.GetComments = __bind(this.GetComments, this);
        this.AddComment = __bind(this.AddComment, this);
        this.RemoveReyan = __bind(this.RemoveReyan, this);
        this.AddReyan = __bind(this.AddReyan, this);
        this.AllUserFollowers = __bind(this.AllUserFollowers, this);
        this.UnfollowUser = __bind(this.UnfollowUser, this);
        this.FollowUser = __bind(this.FollowUser, this);
        this.AllUserYansAndReyans = __bind(this.AllUserYansAndReyans, this);
        this.AllUserReyans = __bind(this.AllUserReyans, this);
        this.AllUserYans = __bind(this.AllUserYans, this);
        this.AllUserHomeYans = __bind(this.AllUserHomeYans, this);
        this.DeleteYan = __bind(this.DeleteYan, this);
        this.GetYan = __bind(this.GetYan, this);
        this.AddYan = __bind(this.AddYan, this);
        this.AddUser = __bind(this.AddUser, this);
        this.AllUsers = __bind(this.AllUsers, this);
        this.UserById = __bind(this.UserById, this);
        this.UsersById = __bind(this.UsersById, this);
        this.LoginWithToken = __bind(this.LoginWithToken, this);
        this.RefreshToken = __bind(this.RefreshToken, this);
        this.GetToken = __bind(this.GetToken, this);
      }

      Services.prototype.GetToken = function(data) {
        return this.httpRequest('post', urls.getToken, {
          grant_type: "password",
          client_id: "mobileV1",
          client_secret: "secret123456",
          username: data.username,
          password: data.password
        });
      };

      Services.prototype.RefreshToken = function(data) {
        return this.httpRequest('post', urls.getToken, {
          "grant_type": "refresh_token",
          "client_id": "mobileV1",
          "client_secret": "secret123456",
          "refresh_token": data.refresh_token
        });
      };

      Services.prototype.LoginWithToken = function(token) {
        return this.httpRequest('post', urls.loginWithToken, {
          access_token: token
        });
      };

      Services.prototype.UsersById = function(ids) {
        return this.httpRequest('post', urls.usersById, {
          ids: ids,
          access_token: window.accessToken
        });
      };

      Services.prototype.UserById = function(id) {
        return this.httpRequest('get', urls.userById(id), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AllUsers = function() {
        return this.httpRequest('get', urls.allUsers, {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AddUser = function(data) {
        return this.xhrRequest('post', urls.addUser, _.extend(data, {
          access_token: window.accessToken
        }));
      };

      Services.prototype.AddYan = function(data) {
        return this.httpRequest('post', urls.addYan, _.extend(data, {
          access_token: window.accessToken
        }));
      };

      Services.prototype.GetYan = function(data) {
        return this.httpRequest('get', urls.getYan(data.yanId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.DeleteYan = function(yanId) {
        return this.httpRequest('delete', urls.deleteYan(yanId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AllUserHomeYans = function(data) {
        return this.httpRequest('get', urls.allUserHomeYans(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AllUserYans = function(data) {
        return this.httpRequest('get', urls.allUserYans(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AllUserReyans = function(data) {
        return this.httpRequest('get', urls.allUserReyans(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AllUserYansAndReyans = function(data) {
        return this.httpRequest('get', urls.allUserYansAndReyans(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.FollowUser = function(data) {
        return this.httpRequest('put', urls.followUser(data.followedId, data.byId), {
          access_token: window.accessToken
        });
      };

      Services.prototype.UnfollowUser = function(data) {
        return this.httpRequest('delete', urls.unfollowUser(data.followedId, data.byId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AllUserFollowers = function(data) {
        return this.httpRequest('get', urls.allUserFollowers(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AddReyan = function(data) {
        return this.httpRequest('put', urls.addReyan(data.yanId, data.userId), {
          access_token: window.accessToken
        });
      };

      Services.prototype.RemoveReyan = function(data) {
        return this.httpRequest('delete', urls.removeReyan(data.yanId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AddComment = function(data) {
        return this.httpRequest('post', urls.addComment(data.yanId), _.extend(data.data, {
          access_token: window.accessToken
        }));
      };

      Services.prototype.GetComments = function(data) {
        return this.httpRequest('get', urls.getComments(data.yanId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.DeleteComment = function(data) {
        return this.httpRequest('delete', urls.deleteComment(data.yanId, data.commentId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.NumberUsers = function() {
        return this.httpRequest('get', urls.numberUsers, {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.NumberUserFollowers = function(userId) {
        return this.httpRequest('get', urls.numberUserFollowers(userId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AttachFile = function(data) {
        return this.xhrRequest('post', urls.addYan, data);
      };

      Services.prototype.AddFavorite = function(data) {
        return this.httpRequest('put', urls.addFavorite(data.yanId, data.userId), {
          access_token: window.accessToken
        });
      };

      Services.prototype.RemoveFavorite = function(data) {
        return this.httpRequest('delete', urls.removeFavorite(data.yanId, data.userId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.NumberYanFavourites = function(data) {
        return this.httpRequest('get', urls.numberYanFavourites(data.yanId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.GetYanFavorites = function(data) {
        return this.httpRequest('get', urls.getYanFavorites(data.yanId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.GetUserFavorites = function(data) {
        return this.httpRequest('get', urls.getUserFavorites(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.AddLike = function(data) {
        return this.httpRequest('put', urls.addLike(data.yanId, data.userId), _.extend(data, {
          access_token: window.accessToken
        }));
      };

      Services.prototype.RemoveLike = function(data) {
        return this.httpRequest('delete', urls.removeLike(data.yanId, data.userId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.NumberYanLikes = function(data) {
        return this.httpRequest('get', urls.numberYanLikes(data.yanId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.ReadNotification = function(data) {
        return this.httpRequest('put', urls.readNotification(data.userId), _.extend(data.notification, {
          access_token: window.accessToken
        }));
      };

      Services.prototype.AllUserNotifications = function(data) {
        return this.httpRequest('get', urls.allUserNotifications(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.PendingUserNotifications = function(data) {
        return this.httpRequest('get', urls.pendingUserNotifications(data.userId, data.range.from, data.range.to), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.DeleteNotification = function(data) {
        return this.httpRequest('delete', urls.deleteNotification(data.userId, data.notificationId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.NumberPendingUserNotifications = function(data) {
        return this.httpRequest('get', urls.numberPendingUserNotifications(data.userId), {
          params: {
            access_token: window.accessToken
          }
        });
      };

      Services.prototype.fakeRequest = function(type, url, data) {
        var deferred,
          _this = this;
        deferred = this.q.defer();
        this.fakeHttp[url](data, function(response) {
          return setTimeout(function() {
            if (!response.error) {
              return deferred.resolve(response.data);
            } else {
              return deferred.reject(response.error);
            }
          }, 500);
        });
        return deferred.promise;
      };

      Services.prototype.fakeHttp = {
        addNotification: function(data, callback) {
          var id, newNotification, response, _ref;
          id = (new Date).getTime();
          newNotification = {
            content: data.content,
            _id: id,
            userId: data.userId,
            fromUserId: data.fromUserId,
            datetime: new Date
          };
          response = {
            data: newNotification,
            error: false
          };
          if (((_ref = window.notifications[data.userId]) != null ? _ref[id] : void 0) == null) {
            if (window.notifications[data.userId] == null) {
              window.notifications[data.userId] = {};
            }
            window.notifications[data.userId][id] = newNotification;
          } else {
            response.error = 'Already exists';
          }
          return callback(response);
        },
        readNotification: function(data, callback) {
          var response;
          response = {
            error: false
          };
          delete window.notifications[data.userId][data.notificationId];
          return callback(response);
        },
        allUserNotifications: function(data, callback) {
          var response;
          response = {
            data: window.notifications[data.userId] || {},
            error: false
          };
          return callback(response);
        },
        addFavorite: function(data, callback) {
          var response, _ref;
          response = {
            data: data,
            error: false
          };
          if (((_ref = window.favorites.byUser[data.userId]) != null ? _ref[data.yanId] : void 0) == null) {
            if (window.favorites.byUser[data.userId] == null) {
              window.favorites.byUser[data.userId] = {};
            }
            window.favorites.byUser[data.userId][data.yanId] = data;
            if (window.favorites.byYan[data.yanId] == null) {
              window.favorites.byYan[data.yanId] = {};
            }
            window.favorites.byYan[data.yanId][data.userId] = data;
          } else {
            response.error = 'Already exists';
          }
          return callback(response);
        },
        removeFavorite: function(data, callback) {
          var response;
          response = {
            error: false
          };
          delete window.favorites.byUser[data.userId][data.yanId];
          delete window.favorites.byYan[data.yanId][data.userId];
          return callback(response);
        },
        getYanFavorites: function(data, callback) {
          var response;
          response = {
            data: window.favorites.byYan[data.yanId] || {},
            error: false
          };
          return callback(response);
        },
        getUserFavorites: function(data, callback) {
          var response;
          response = {
            data: window.favorites.byUser[data.userId] || {},
            error: false
          };
          return callback(response);
        },
        addLike: function(data, callback) {
          var response, _ref;
          response = {
            data: data,
            error: false
          };
          if (((_ref = window.likes.byUser[data.userId]) != null ? _ref[data.yanId] : void 0) == null) {
            if (window.likes.byUser[data.userId] == null) {
              window.likes.byUser[data.userId] = {};
            }
            window.likes.byUser[data.userId][data.yanId] = data;
            if (window.likes.byYan[data.yanId] == null) {
              window.likes.byYan[data.yanId] = {};
            }
            window.likes.byYan[data.yanId][data.userId] = data;
          } else {
            response.error = 'Already exists';
          }
          return callback(response);
        },
        removeLike: function(data, callback) {
          var response;
          response = {
            error: false
          };
          delete window.likes.byUser[data.userId][data.yanId];
          delete window.likes.byYan[data.yanId][data.userId];
          return callback(response);
        },
        getYanLikes: function(data, callback) {
          var response;
          response = {
            data: window.likes.byYan[data.yanId] || {},
            error: false
          };
          return callback(response);
        }
      };

      Services.prototype.xhrRequest = function(type, url, data) {
        var deferred, form, k, v, xhr, _ref,
          _this = this;
        deferred = this.q.defer();
        form = new FormData;
        _ref = data.params;
        for (k in _ref) {
          v = _ref[k];
          form.append(k, v);
        }
        xhr = new XMLHttpRequest;
        xhr.upload.onprogress = data.progress;
        xhr.onload = function() {
          return deferred.resolve(JSON.parse(xhr.response));
        };
        xhr.onerror = function() {
          return deferred.reject(JSON.parse(xhr.response));
        };
        xhr.onabort = null;
        xhr.open(type, url);
        xhr.send(form);
        return deferred.promise;
      };

      Services.prototype.httpRequest = function(type, url, data) {
        var deferred,
          _this = this;
        deferred = this.q.defer();
        this.http[type](url, data).success(function(response) {
          if (!(response.error || response === 'Unauthorized')) {
            return deferred.resolve(response);
          } else {
            return deferred.reject(response.message);
          }
        });
        return deferred.promise;
      };

      return Services;

    }).call(this);
    return this.services = function(rootScope, q, http, resource) {
      window.http = http;
      window.resource = resource;
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Services, arguments, function(){});
    };
  });

  window.namespace('app', function() {
    var _this = this;
    return this.makeRequest = function(service, data, onSuccess, onError) {
      return service.get(data).then(onSuccess, onError);
    };
  });

  window.namespace('app', function() {
    var Helpers, PagesHelper;
    PagesHelper = (function() {
      function PagesHelper(from, to) {
        this.from = from;
        this.to = to;
        if (this.from == null) {
          this.from = 1;
        }
        if (this.to == null) {
          this.to = 10;
        }
      }

      PagesHelper.prototype.range = function() {
        return this.to - this.from + 1;
      };

      PagesHelper.prototype["default"] = function() {
        this.from = 1;
        return this.to = 10;
      };

      PagesHelper.prototype.shift = function(n) {
        this.from += n;
        return this.to += n;
      };

      return PagesHelper;

    })();
    Helpers = (function() {
      function Helpers() {
        this.setCookie = __bind(this.setCookie, this);
        this.getCookie = __bind(this.getCookie, this);
        this.objLen = __bind(this.objLen, this);
        this.ext = __bind(this.ext, this);
        this.exclude = __bind(this.exclude, this);
        this.include = __bind(this.include, this);
        this.pagesHelper = __bind(this.pagesHelper, this);
      }

      Helpers.prototype.pagesHelper = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(PagesHelper, arguments, function(){});
      };

      Helpers.prototype.arrayOfValuesToObject = function(array) {
        var obj, val, _i, _len;
        if (array == null) {
          return {};
        }
        obj = {};
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          val = array[_i];
          obj[val] = val;
        }
        return obj;
      };

      Helpers.prototype.arrayToObject = function(array, key) {
        var elem, obj, _i, _len;
        if (array == null) {
          return {};
        }
        obj = {};
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          elem = array[_i];
          obj[elem[key]] = elem;
        }
        return obj;
      };

      Helpers.prototype.arrayToObjectOfArray = function(array, key) {
        var elem, obj, _i, _len;
        if (array == null) {
          return {};
        }
        obj = {};
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          elem = array[_i];
          if (obj[elem[key]] == null) {
            obj[elem[key]] = [];
          }
          obj[elem[key]].push(elem);
        }
        return obj;
      };

      Helpers.prototype.objectToArray = function(obj) {
        var array, k, v;
        if (obj == null) {
          return [];
        }
        array = [];
        for (k in obj) {
          v = obj[k];
          array.push(v);
        }
        return array;
      };

      Helpers.prototype.removeFromArrayOfObjectsWhere = function(arr, key, value) {
        var elem, i, index, _i, _len;
        if (arr == null) {
          return [];
        }
        index = null;
        for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
          elem = arr[i];
          if (elem[key] === value) {
            index = i;
          }
        }
        if (index != null) {
          arr.splice(index, 1);
        }
        return arr;
      };

      Helpers.prototype.dateToYMDTime = function(d) {
        var date, doubleDigits, h, m, min, sec, y;
        if (d == null) {
          return;
        }
        date = new Date(d);
        if (typeof d === "string" && (isNaN(date.getTime()) || /^\d{2}\/\d{2}\/\d{4}$/.test(d))) {
          return d;
        }
        d = date.getDate();
        m = date.getMonth() + 1;
        y = date.getFullYear();
        h = date.getHours();
        min = date.getMinutes();
        sec = date.getSeconds();
        doubleDigits = function(n) {
          return "" + (n <= 9 ? '0' + n : n);
        };
        return "" + y + "/" + (doubleDigits(m)) + "/" + (doubleDigits(d)) + " | " + (doubleDigits(h)) + ":" + (doubleDigits(min)) + ":" + (doubleDigits(sec));
      };

      Helpers.prototype.include = function(scope, names, obj, pages) {
        var _this = this;
        return scope.tryApply(function() {
          var i, name, _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = names.length; _i < _len; i = ++_i) {
            name = names[i];
            if (scope["" + name + "ById"] == null) {
              continue;
            }
            if (scope["" + name + "ById"][obj._id] != null) {
              continue;
            }
            scope[name] = [obj].concat(scope[name]);
            scope["" + name + "ById"][obj._id] = obj;
            _results.push(pages[i].shift(1));
          }
          return _results;
        });
      };

      Helpers.prototype.exclude = function(scope, names, obj, pages) {
        var self,
          _this = this;
        self = this;
        return scope.tryApply(function() {
          var i, name, _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = names.length; _i < _len; i = ++_i) {
            name = names[i];
            if (!scope[name]) {
              continue;
            }
            scope[name] = self.removeFromArrayOfObjectsWhere(scope[name], '_id', obj._id);
            delete scope["" + name + "ById"][obj._id];
            _results.push(pages[i].shift(-1));
          }
          return _results;
        });
      };

      Helpers.prototype.ext = function(str) {
        return str.match(/\.([^\.]+)$/)[1];
      };

      Helpers.prototype.objLen = function(obj) {
        var k, n, v;
        n = 0;
        for (k in obj) {
          v = obj[k];
          n++;
        }
        return n;
      };

      Helpers.prototype.getCookie = function(name) {
        var matches;
        matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        if (matches) {
          return decodeURIComponent(matches[1]);
        } else {
          return null;
        }
      };

      Helpers.prototype.setCookie = function(name, value, options) {
        var d, expires, propName, propValue, updatedCookie;
        options = options || {};
        expires = options.expires;
        if (typeof expires === "number" && expires) {
          d = new Date();
          d.setTime(d.getTime() + expires * 1000);
          expires = options.expires = d;
        }
        if (expires && expires.toUTCString) {
          options.expires = expires.toUTCString();
        }
        value = encodeURIComponent(value);
        updatedCookie = name + "=" + value;
        for (propName in options) {
          propValue = options[propName];
          updatedCookie += "; " + propName;
          propValue = options[propName];
          if (propValue !== true) {
            updatedCookie += "=" + propValue;
          }
        }
        return document.cookie = updatedCookie;
      };

      return Helpers;

    })();
    return this.helpers = (function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Helpers, arguments, function(){});
    })();
  });

  serverUrl = 'http://iyansserver.herokuapp.com/';

  window.serverUrl = serverUrl;

  urls = {
    getToken: "" + serverUrl + "oauth/token/",
    loginWithToken: "" + serverUrl + "users/id/",
    usersById: "" + serverUrl + "users/ids/",
    userById: function(userId) {
      return "" + serverUrl + "users/" + userId;
    },
    allUsers: "" + serverUrl + "users/",
    addUser: "" + serverUrl + "users/",
    addYan: "" + serverUrl + "yans/",
    getYan: function(yanId) {
      return "" + serverUrl + "yans/" + yanId;
    },
    deleteYan: function(yanId) {
      return "" + serverUrl + "yans/" + yanId + "/";
    },
    allUserHomeYans: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/followyans?from=" + from + "&to=" + to + "/";
    },
    allUserYans: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/all?from=" + from + "&to=" + to + "/";
    },
    allUserReyans: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/reyans?from=" + from + "&to=" + to + "/";
    },
    allUserYansAndReyans: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/allinone?from=" + from + "&to=" + to + "/";
    },
    followUser: function(followedId, byId) {
      return "" + serverUrl + "users/" + followedId + "/follow/" + byId + "/";
    },
    unfollowUser: function(followedId, byId) {
      return "" + serverUrl + "users/" + followedId + "/unfollow/" + byId + "/";
    },
    allUserFollowers: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/followers?from=" + from + "&to=" + to + "/";
    },
    addReyan: function(yanId, userId) {
      return "" + serverUrl + "yans/" + yanId + "/reyaned/" + userId + "/";
    },
    removeReyan: function(yanId) {
      return "" + serverUrl + "yans/" + yanId + "/";
    },
    addComment: function(yanId) {
      return "" + serverUrl + "yans/" + yanId + "/comments/";
    },
    getComments: function(yanId, from, to) {
      return "" + serverUrl + "yans/" + yanId + "/comments?from=" + from + "&to=" + to + "/";
    },
    deleteComment: function(yanId, commentId) {
      return "" + serverUrl + "yans/" + yanId + "/comments/" + commentId + "/";
    },
    numberUsers: "" + serverUrl + "users/count/",
    numberUserFollowers: function(userId) {
      return "" + serverUrl + "users/" + userId + "/followers/count/";
    },
    addFavorite: function(yanId, userId) {
      return "" + serverUrl + "yans/" + yanId + "/favorited/" + userId;
    },
    removeFavorite: function(yanId, userId) {
      return "" + serverUrl + "yans/" + yanId + "/favorited/" + userId;
    },
    numberYanFavourites: function(yanId) {
      return "" + serverUrl + "yans/" + yanId + "/favorited/count";
    },
    getYanFavorites: function(yanId) {
      return "" + serverUrl + "yans/" + yanId + "/favorited";
    },
    getUserFavorites: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/favorites?from=" + from + "&to=" + to;
    },
    addLike: function(yanId, userId) {
      return "" + serverUrl + "yans/" + yanId + "/like/" + userId;
    },
    removeLike: function(yanId, userId) {
      return "" + serverUrl + "yans/" + yanId + "/like/" + userId;
    },
    numberYanLikes: function(yanId) {
      return "" + serverUrl + "yans/" + yanId + "/like/count";
    },
    readNotification: function(userId) {
      return "" + serverUrl + "users/" + userId + "/notifications/";
    },
    allUserNotifications: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/notifications?from=" + from + "&to=" + to + "/";
    },
    pendingUserNotifications: function(userId, from, to) {
      return "" + serverUrl + "users/" + userId + "/notifications/pending?from=" + from + "&to=" + to + "/";
    },
    deleteNotification: function(userId, notificationId) {
      return "" + serverUrl + "users/" + userId + "/notifications/" + notificationId + "/";
    },
    numberPendingUserNotifications: function(userId) {
      return "" + serverUrl + "users/" + userId + "/notifications/pending/count";
    }
  };

  window.paths = {
    myHome: '/main/home/myhome',
    me: '/main/home/me',
    myDash: '/main/home/mydashboard',
    hisHome: '/main/attend/attendhome',
    hisDash: 'main/attend/attenddashboard',
    homeFavorites: '/main/home/homefavorites',
    notifications: '/main/home/notifications',
    root: '/root',
    login: '/login',
    signup: '/signup',
    singleYan: function(yanId) {
      return "/main/home/singleYan/" + yanId;
    }
  };

}).call(this);
